"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanObject = cleanObject;
exports.cleanString = cleanString;
exports.cleanArray = cleanArray;
exports.reducer = void 0;

var _trim2 = _interopRequireDefault(require("lodash/fp/trim"));

var _set2 = _interopRequireDefault(require("lodash/fp/set"));

var _reject2 = _interopRequireDefault(require("lodash/fp/reject"));

var _reduce2 = _interopRequireDefault(require("lodash/fp/reduce"));

var _map2 = _interopRequireDefault(require("lodash/fp/map"));

var _isUndefined2 = _interopRequireDefault(require("lodash/fp/isUndefined"));

var _isEmpty2 = _interopRequireDefault(require("lodash/fp/isEmpty"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transform = _reduce2.default.convert({
  cap: false
}); // Build up a new so fresh, so clean object.


var reducer = function reducer(clean) {
  return function (result, value, key) {
    var cleanValue = clean(value, clean);
    return (0, _isUndefined2.default)(cleanValue) ? result : (0, _set2.default)([key], cleanValue, result);
  };
}; // Assume we have a fairly normal data object here?


exports.reducer = reducer;

function cleanObject(obj, clean) {
  var item = transform(reducer(clean), undefined, obj);
  return (0, _isEmpty2.default)(item) ? undefined : item;
}

function cleanString(string) {
  return (0, _trim2.default)(string) || undefined;
}

function cleanArray(items, clean) {
  var cleanItems = (0, _map2.default)(function (item) {
    return clean(item, clean);
  }, items);
  var remainingItems = (0, _reject2.default)(_isUndefined2.default, cleanItems);
  return (0, _isEmpty2.default)(remainingItems) ? undefined : remainingItems;
}
/**
 * [isWorthless description]
 * @param {any} value
 * @return {bool} Tells you if value is empty.
 * @example isWorthless({}) // => true
 * @example isWorthless([' ', null]) // => true
 * @example isWorthless(' ') // => true
 * @example isWorthless({ foo: null, bar: 0 }) // => true
 */
// export const isWorthless = overSome([
//   isNull, isFalse, isZero, isEmptyString, isEmptyArray, isEmptyObject,
// ])
// export const rejectWorthless = reject(isWorthless)
// export const cleanObject = omitBy(isWorthless)
// export const clean = condId(
//   [isArray, flow(compact, map(clean))], // eslint-disable-line no-use-before-define
//   [isPlainObject, cleanObject],
//   [isString, trim],
// )